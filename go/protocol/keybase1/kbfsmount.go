// Auto-generated by avdl-compiler v1.3.9 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/kbfsmount.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type GetCurrentMountDriveArg struct {
}

type GetAllAvailableMountDrivesArg struct {
}

type SetCurrentMountDriveArg struct {
	Drive string `codec:"drive" json:"drive"`
}

type KbfsMountInterface interface {
	GetCurrentMountDrive(context.Context) (string, error)
	GetAllAvailableMountDrives(context.Context) ([]string, error)
	SetCurrentMountDrive(context.Context, string) error
}

func KbfsMountProtocol(i KbfsMountInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.kbfsMount",
		Methods: map[string]rpc.ServeHandlerDescription{
			"GetCurrentMountDrive": {
				MakeArg: func() interface{} {
					ret := make([]GetCurrentMountDriveArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					ret, err = i.GetCurrentMountDrive(ctx)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"GetAllAvailableMountDrives": {
				MakeArg: func() interface{} {
					ret := make([]GetAllAvailableMountDrivesArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					ret, err = i.GetAllAvailableMountDrives(ctx)
					return
				},
				MethodType: rpc.MethodCall,
			},
			"SetCurrentMountDrive": {
				MakeArg: func() interface{} {
					ret := make([]SetCurrentMountDriveArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]SetCurrentMountDriveArg)
					if !ok {
						err = rpc.NewTypeError((*[]SetCurrentMountDriveArg)(nil), args)
						return
					}
					err = i.SetCurrentMountDrive(ctx, (*typedArgs)[0].Drive)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type KbfsMountClient struct {
	Cli rpc.GenericClient
}

func (c KbfsMountClient) GetCurrentMountDrive(ctx context.Context) (res string, err error) {
	err = c.Cli.Call(ctx, "keybase.1.kbfsMount.GetCurrentMountDrive", []interface{}{GetCurrentMountDriveArg{}}, &res)
	return
}

func (c KbfsMountClient) GetAllAvailableMountDrives(ctx context.Context) (res []string, err error) {
	err = c.Cli.Call(ctx, "keybase.1.kbfsMount.GetAllAvailableMountDrives", []interface{}{GetAllAvailableMountDrivesArg{}}, &res)
	return
}

func (c KbfsMountClient) SetCurrentMountDrive(ctx context.Context, drive string) (err error) {
	__arg := SetCurrentMountDriveArg{Drive: drive}
	err = c.Cli.Call(ctx, "keybase.1.kbfsMount.SetCurrentMountDrive", []interface{}{__arg}, nil)
	return
}
